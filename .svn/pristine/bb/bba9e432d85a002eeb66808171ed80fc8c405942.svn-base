package com.cn.service.impl;

import com.aliyuncs.exceptions.ClientException;
import com.cn.config.SystemConfig;
import com.cn.dao.AdminMapper;
import com.cn.dao.UserMapper;
import com.cn.dto.JsonResult;
import com.cn.pojo.Admin;
import com.cn.pojo.Register;
import com.cn.service.AdminService;
import com.cn.utils.*;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: wmy
 * Date: 2019/11/28 9:48
 * Description:
 */
@SuppressWarnings("all")
@Service
@Transactional(rollbackFor = Throwable.class)
public class AdminServiceImpl implements AdminService {

    @Autowired
    private AdminMapper adminMapper;

    @Autowired
    private UserMapper userMapper;

    @Autowired(required=true)
    private SystemConfig sysc;

    @Override
    public JsonResult<Admin> login(String adminName, String password) {
        Admin dbAdmin = adminMapper.findByAdminName(adminName);
        if (dbAdmin == null) {
            //用户不存在
            return new JsonResult<>(4001, "没有该用户");
        }

        if (!dbAdmin.getAdminPassword().equals(MD5Util.MD55(password))) {
            return new JsonResult<>(4002, "密码不正确");
        }
        //把结果保存在token中
        String token = JwtUtil.sign(dbAdmin, dbAdmin.getAdminId());

        return new JsonResult(200, "登录成功",dbAdmin.getAdminId() ,token);
    }

    @Override
    public JsonResult<Admin> findByAdminName(String adminName, String adminPhone) {
        Admin byAdminName = adminMapper.findByAdminName(adminName);
        if (byAdminName == null) {
            return new JsonResult(4001, "用户名错误，没有该用户");
        }
        Admin dbAdmin = adminMapper.findByAdminNameAndAdminPhone(adminName, adminPhone);
        if (dbAdmin == null) {
            return new JsonResult(4011, "该手机号不是绑定的手机号");
        }
        String code = RandomNumberUtil.getCode();
        try {
            SendCodeUtil.sendSms(adminPhone, code);
            //把手机号和验证码保存到临时表中
            addRegister(new Register(adminPhone, code));
            //验证码发送成功，并把需要修改的Id发送给前端保存起来
            return new JsonResult(200, "验证码发送成功",dbAdmin.getAdminId() ,code);
        } catch (ClientException e) {
            e.printStackTrace();
        }
        return new JsonResult(4014, "验证码发送失败");
    }

    @Override
    public JsonResult judgeCode(Register register) {
        Register flag = userMapper.findRegisterAll(register);
        if (flag == null) {
            return new JsonResult(4015, "验证码错误");
        }
        return new JsonResult(200, "验证码正确");
    }

    @Override
    public JsonResult findByadminId(Integer adminId) {
        Admin admin = adminMapper.findByAdminId(adminId);
        return new JsonResult(200, "个人资料查询成功", admin);
    }

    @Override
    public JsonResult updateMyselfe(Admin admin, MultipartFile header) {
        Admin dbAdmin = adminMapper.findByAdminId(admin.getAdminId());
        Admin byAdminPhone = adminMapper.findByAdminPhone(admin.getAdminPhone());
        if (byAdminPhone!=null && byAdminPhone.getAdminId() != admin.getAdminId()) {
            return new JsonResult(4016, "该电话号码已经被注册，请重新输入");
        }
        System.out.println("---------+++++--------------");
        System.out.println(header);
        // 判断是否有文件上传过来
        if (!header.isEmpty()) {
            // 获取文件的名字
            String filename = header.getOriginalFilename();
            // 解析文件的后缀
            String suffix = FileUtil.getSuffix(filename);
            if (suffix == null) {
                return new JsonResult(4003, "文件名不符合规范!");
            }
            // 判断后缀是否符合需求
            String suffixs = sysc.getSuffixs();
            if (!suffixs.contains(suffix)) {
                return new JsonResult(4004, "文件类型不符合要求!");
            }
            // 获取唯一的文件名
            String uploadFileName = FileUtil.getFileName();
            // 获取文件保存的路径
            String datePath = FileUtil.getDataFilePath();
            // 获取文件保存的路径
            String basePath = sysc.getBasePath();
            // 先创建上传的路径
            FileUtil.createDirs(basePath + "/headerImg/" + datePath);
            // 准备文件抽象的File对象
            File file = new File(basePath + "/headerImg/" + datePath + uploadFileName + suffix);
            // 上传
            try {
                header.transferTo(file);
            } catch (IOException e) {
                return new JsonResult(4000,"上传失败");
            }
            admin.setAdminImgUrl("headerImg/" + datePath + uploadFileName + suffix);
            System.out.println(admin.getAdminImgUrl());
            System.out.println(admin.getAdminPhone());
            Integer row = adminMapper.updateAdminMessage(admin);
            if (row > 0) {
                return new JsonResult(200, "个人信息修改成功");
            }else if (row==0){
                return new JsonResult(4013, "个人信息修改失败");
            }
        }
        return new JsonResult(4014, "头像上传失败");
    }

    @Override
    public JsonResult<Admin> updateAdminPassword(Integer adminId, String adminPassword) {
        System.out.println(adminId);
        System.out.println(adminPassword);
        if (adminId != null && adminPassword != null) {
            String md55 = MD5Util.MD55(adminPassword);
            adminMapper.updateAdminPassword(adminId, md55);
            return new JsonResult(200, "密码修改成功");
        }
        return new JsonResult(4020, "密码修改错误");
    }


    @Override
    public Boolean addRegister(Register register) {
        Register register1 = userMapper.findRegister(register.getRegisterPhone());
        System.out.println("++++++++++++++++" + register1);
        if (register1 != null) {
            Integer integer = userMapper.updateRegister(register);
            System.out.println("++++++++11111+++++" + integer);
            return true;
        } else if (register1 == null) {
            Integer integer = userMapper.addRegister(register);
            System.out.println("+++++++22222++++++" + integer);
            return true;
        }
        return false;
    }


    ////////////////////////////////////////////////////管理员操作----李静的Mapper,放在下面/////////////////////////////////


    /**
     * 查找所有管理员(含分页)
     *
     * @param size
     * @param sizePage
     * @return
     * @author 李静
     */
    @Override
    public PageInfo findAllAdmin(Integer size, Integer sizePage) {
        // 判断数据
        if (size == null || sizePage == null)
//            (205,"请求驳回！参数为空")
            if (size == 0 || sizePage == 0)
//            throw new UserException(206,"请求驳回！参数不正确");

                // 正常返回数据


                // 获取全部用户

//        return new PageInfo(null);
                return null;
        return null;
    }

    /**
     * 查找被删除的管理员(含分页)
     *
     * @param size
     * @param sizePage
     * @return
     * @author 李静
     */
    public PageInfo findAllDelAdmin(Integer size, Integer sizePage) {
        // 判断数据
        if (size == null || sizePage == null)
//            throw new UserException(205,"请求驳回！参数为空");
            if (size == 0 || sizePage == 0)
//            throw new UserException(206,"请求驳回！参数不正确");

                // 正常返回数据
//        PageHelper pageHelper = new PageHelper();

//        pageHelper.startPage(size, sizePage);
                // 获取全部用户
//        List<User> users = userMapper.findAllUser();

//        if (users == null)
                // 数据库无数据
//            throw new UserException(204,"请求已处理，数据库无数据");

                return new PageInfo(null);
        return null;
    }

    /**
     * 后台管理员根据条件查询用户信息
     *
     * @param size
     * @param sizePage
     * @param
     * @param
     * @return
     * @author 李静
     */
    public PageInfo findAdminByConditions(Integer size, Integer sizePage, String userName, Integer userState) {
        // 判断数据
        /*if (size == null || sizePage == null)
            throw new UserException(2004,"请求驳回！参数为空");
        if (size == 0 || sizePage == 0)
            throw new UserException(2005,"请求驳回！参数不正确");


        PageHelper pageHelper = new PageHelper();
        // 正常访问
        pageHelper.startPage(size, sizePage);
        // 条件查询
        List<User> users = userMapper.findUserByConditions(userName,userState);

        if (users.size() == 0)
            // 数据库无数据
            throw new UserException(204,"请求已处理，数据库无数据");
*/
        return new PageInfo(null);
    }

    /**
     * 根据用户Id
     *
     * @param userId
     * @return
     */
    @Override
    /**
     * 根据管理员Id
     * @author 李静
     * @param adminId
     * @return
     */
    public JsonResult findAdminById(Integer adminId) {

        // 验证数据 userId == null 无法判断
        /*if (userId.equals("") || userId == 0) {
            throw new UserException(203,"用户Id为空");
        }

        User user = userMapper.findUserById(userId);

        // 从数据库中无数据获取
        if (user == null) {
            throw new UserException(204,"请求已处理，用户不存在");
        }

        // 成功返回
        return user;*/
        return null;
    }

    /**
     * 根据管理员Id删除(假删)管理员
     *
     * @param adminId
     * @return 是否删除
     * @author 李静
     */
    public JsonResult delAdminById(Integer adminId) {
        // 判断参数是否有效
        /*if (userId == 0 || userId == null || userId.equals("") ) {
            throw new UserException(203, "用户Id为空！");
        }

        // Id不在数据库中
        if (userMapper.delUser(userId) <= 0) {
            throw new UserException(204,"请求已处理，数据库中无此用户");
        }
*/
        // 删除成功
        return new JsonResult(200, "删除成功");
    }

    /**
     * 根据管理员id组删除(假删)管理员
     *
     * @param ids
     * @return
     * @author 李静
     */
    public JsonResult delAdmins(List<Integer> ids) {
        // 判断参数是否有效
        if (ids.size() <= 0 || ids == null) {
//            throw new UserException(207,"用户ids组参数有误");
        }
        // 参数有效
        Integer isDel = userMapper.delUsers(ids);
        System.out.println(ids);
        if (isDel == 0) {
            return new JsonResult(301, "删除失败");
        }
        return new JsonResult(200, "删除成功", isDel);
    }

    /**
     * 根据管理员id恢复
     *
     * @param adminId
     * @return
     */
    public JsonResult resumeAdmin(Integer adminId) {
        // 判断参数是否有效
       /* if (userId == 0 || userId == null || userId.equals("") ) {
            throw new UserException(2006,"用户Id为空");
        }
        return userMapper.resumeUser(userId) > 0 ? true : false;*/
        return null;
    }

    /**
     * 根据管理员Id删除(真删)管理员
     *
     * @param adminId
     * @return 是否删除
     * @author 李静
     */
    public JsonResult deleteAdminById(Integer adminId) {
        // 判断参数是否有效
        /*if (userId == 0 || userId == null || userId.equals("") ) {
            throw new UserException(2006,"用户Id为空");
        }

        if (userMapper.delUser(userId) <= 0) {
            throw new UserException(204,"请求已处理，无实体返回");
        }*/

        // 参数有效
        return null;
    }

    /**
     * 根据管理员id组删除(真删)管理员
     *
     * @param ids
     * @return 是否删除成功
     * @author 李静
     */
    public JsonResult deleteAdmins(List<Integer> ids) {
        // 判断参数是否有效
        if (ids.size() <= 0 || ids == null) {
//            throw new UserException(2007,"用户ids组参数有误");
        }
        // 参数有效
        userMapper.delUsers(ids);
        return null;
    }
    ///////////////////////////////////////////////////保护屏障//////////////////////////////////////////////////////////

}
