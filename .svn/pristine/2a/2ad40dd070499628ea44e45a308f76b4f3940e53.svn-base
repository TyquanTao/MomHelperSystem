package com.cn.web.controller;

import com.cn.dto.JsonResult;
import com.cn.pojo.User;
import com.cn.service.UserService;
import com.cn.utils.JwtUtil;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;

@RestController
@Api(tags = "张鹏用户API",value = "zz")
public class ZpUserController {

    @Autowired
    private UserService zpuserService;
    /**
     * 登录的方法，通过手机号+密码
     * @return
     */
    @PostMapping("/zp/user/loginByPassword")
    @ApiOperation(value = "登陆方法")
    @ApiImplicitParam
    public JsonResult loginByPassword(Integer phone,String password){

        JsonResult<User> login = zpuserService.login(phone, password);
        //生成token
        String token = JwtUtil.sign(login, login.getData().getUserId());
        Integer userId = JwtUtil.getUserId(token);
        System.out.println(userId);
        return new JsonResult(200,"success",token,login.getData().getUserId());
    }

    /**
     * 登录的方法，通过手机号+验证码
     * @return
     */
    @GetMapping("/zp/user/loginByCode")
    @ApiOperation(value = "登陆方法")
    @ApiImplicitParam
    public JsonResult loginByCode(){
        return new JsonResult(200,"success");
    }


    /**
     * 注册的方法
     * @param phone:注册用的手机号
     * @param password：注册用的密码
     * @return
     */
    @PostMapping("/zp/user/register")
    @ApiOperation(value = "注册的方法")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query",name = "phone",value = "注册的手机号",required = true,dataType = "int"),
            @ApiImplicitParam(paramType = "query",name = "password",value = "注册的密码",required = true,dataType = "String")
    })
    public JsonResult register(Integer phone,String password){
        return new JsonResult(200,"success",phone);
    }

    /**
     * 查询自己信息的方法
     * @param id：需要的参数
     * @return
     */
    @PostMapping("/zp/user/findMyself")
    @ResponseBody
    @ApiOperation(value = "查询个人信息")
    @ApiImplicitParam(paramType = "query",name="id",value = "查询的id",required = true,dataType = "int")
    public JsonResult findMyself(Integer id){
        User user = zpuserService.findUserByUserid(id);
        return new JsonResult(200,"success",user);
    }

    /**
     * 修改自己的个人信息
     * @param user：修改的类
     * @return
     */
    @PostMapping("/zp/user/updateMyself")
    @ApiOperation(value = "修改个人信息")
    @ApiImplicitParam(paramType = "body",name = "user",value = "修改类",dataType = "User")
    public JsonResult updateMyself(@RequestBody User user){
        Boolean updateUser = zpuserService.updateUser(user);
        if (updateUser){
            return new JsonResult(200,"修改成功");
        }
        return new JsonResult(2001,"修改失败");
    }

    /**
     * 关注用户
     * @param userId:用户ID
     * @param followUserId：被关注的用户ID
     * @return
     */
    @PostMapping("/user/user")
    @ApiOperation(tags = "罗世杰",value = "关注用户")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query",name = "usreId",value = "用户id",required = true,dataType = "int"),
            @ApiImplicitParam(paramType = "query",name = "followUserId",value = "被关注用户id",required = true,dataType = "int")
    })
    public JsonResult add(Integer userId,Integer followUserId){
        return null;
    }

    /**
     * 取消关注用户
     * @param userId：用户ID
     * @param followUserId：取消关注的用户ID
     * @return
     */
    @PostMapping("/user/delectuser")
    @ApiOperation(tags = "罗世杰",value = "取消关注用户")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query",name = "usreId",value = "用户id",required = true,dataType = "int"),
            @ApiImplicitParam(paramType = "query",name = "followUserId",value = "被关注用户id",required = true,dataType = "int")
    })
    public JsonResult delectuser(Integer userId,Integer followUserId){
        return null;
    }


    /**
     * 判断用户的状态
     * @param id
     * @return
     */
    @PostMapping("/zp/user/decideState")
    @ApiOperation(value = "判断用户的状态")
    @ApiImplicitParam(paramType = "query",name = "userId",value = "用户的id",required = true,dataType = "int")
    public JsonResult decideState(Integer id){
        Boolean decideState = zpuserService.decideState(id);
        if (decideState==true){
            return new JsonResult(200,"success",decideState);
        }
        return new JsonResult(1001,"第一次登陆",decideState);
    }

    /**
     * 修改用户的状态
     * @param userId
     * @param stateId
     * @return
     */
    @PostMapping("/zp/user/updatestate")
    @ApiOperation(value = "修改用户的状态")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query",name = "userId",value = "用户的id",required = true,dataType = "int"),
            @ApiImplicitParam(paramType = "query",name = "stateId",value = "状态的id",required = true,dataType = "int"),
            @ApiImplicitParam(paramType = "query",name = "starttime",value = "状态的开始时间",required = true,dataType = "Timestamp")
    })
    public JsonResult updateState(Integer userId, Integer stateId, Timestamp starttime){
        Boolean updateState = zpuserService.updateState(userId, stateId,starttime);
        if (updateState==true){
            return new JsonResult(200,"修改成功");
        }
        return new JsonResult(1002,"修改失败");
    }

    @GetMapping("/zp/fant/countfant")
    @ApiOperation(value = "统计粉丝的数量")
    @ApiImplicitParam(paramType = "query",name = "userId",value = "用户的id",required = true,dataType = "int")
    public JsonResult countFants(Integer id){
        Integer countFants = zpuserService.countFants(id);
        return new JsonResult(200,"success",countFants);
    }
}
