package com.cn.service.impl;

import com.cn.dao.QuestionMapper;
import com.cn.dao.SearchMapper;
import com.cn.dto.JsonResult;
import com.cn.pojo.*;
import com.cn.service.QuestionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * @author Tyquan
 * @date 2019/11/28 10:25
 */
@Service
@Transactional(rollbackFor = Throwable.class)
@SuppressWarnings("all")
public class QuestionServiceImpl implements QuestionService {

    @Autowired
    private QuestionMapper questionMapper;
    @Autowired
    private SearchMapper searchMapper;

    @Override
    public JsonResult addQuestion(Question question) {
        //获得受影响的行数
        Integer rows = questionMapper.addQuestion(question);
        //
        if (rows > 0) {
            Integer id = questionMapper.selectQuestionId(question);
            return new JsonResult(200, "提交问题成功！", null, id);
        }
        return new JsonResult(408, "提交问题失败!");
    }

    @Override
    public JsonResult<Question> findQuestionById(Integer questionId, Integer userId) {
        //校验问题id
        if (questionId == null) {
            return new JsonResult<>(307, "问题id不能为空！");
        }
        Question question = questionMapper.findQuestionById(questionId);
        if (question == null) {
            return new JsonResult<>(404, "你查看的问题已不存在！");
        }
        //设置问题点赞状态
        for (QuestionFabulous questionFabulous : question.getQuestionFabulousList()) {
            if (questionFabulous.getUserId().equals(userId)) {
                question.setPraiseState(1);
                break;
            }
        }
        //设置问题收藏状态
        for (QuestionCollection questionCollection : question.getQuestionCollectionList()) {
            if (questionCollection.getUserId().equals(userId)) {
                question.setCollectState(1);
                break;
            }
        }
        for (Answer answer : question.getAnswers()) {
            for (AnswerFabulous answerFabulous : answer.getAnswerFabulousList()) {
                if (answerFabulous.getUserId().equals(userId)) {
                    answer.setPraiseState(1);
                    break;
                }
            }
        }
        return new JsonResult<>(200, "查询问题详情成功", question);
    }

    @Override
    public JsonResult<List<Question>> findAllByHot(Integer userId) {
        List<Question> hotQuestions = questionMapper.findAllByHot();
        //双重循环设置点赞状态
        for (Question hotQuestion : hotQuestions) {
            for (QuestionFabulous fabulous : hotQuestion.getQuestionFabulousList()) {
                if (fabulous.getUserId().equals(userId)) {
                    hotQuestion.setPraiseState(1);
                    break;
                }
            }
        }
        //双重循环设置收藏状态
        for (Question hotQuestion : hotQuestions) {
            for (QuestionCollection questionCollection : hotQuestion.getQuestionCollectionList()) {
                if (questionCollection.getUserId().equals(userId)) {
                    hotQuestion.setCollectState(1);
                    break;
                }
            }
        }
        return new JsonResult<List<Question>>(200, "获取热门问题成功", hotQuestions);
    }

    @Override
    public JsonResult<List<Question>> findAllByUnsolved(Integer userId) {
        List<Question> hotQuestions = questionMapper.findAllByUnsolvedQuestion();
        //双重循环设置点赞状态
        for (Question hotQuestion : hotQuestions) {
            for (QuestionFabulous fabulous : hotQuestion.getQuestionFabulousList()) {
                if (fabulous.getUserId().equals(userId)) {
                    hotQuestion.setPraiseState(1);
                    break;
                }
            }
        }
        //双重循环设置收藏状态
        for (Question hotQuestion : hotQuestions) {
            for (QuestionCollection questionCollection : hotQuestion.getQuestionCollectionList()) {
                if (questionCollection.getUserId().equals(userId)) {
                    hotQuestion.setCollectState(1);
                    break;
                }
            }
        }
        return new JsonResult<List<Question>>(200, "获取待决解问题成功", hotQuestions);
    }

    @Override
    public JsonResult<List<Question>> findQuestionLikeTitle(Integer userId, String questionTitle) {
        Integer row = searchMapper.addSearchForQuestion(userId, questionTitle);
        if (row==0) {
            return new JsonResult<>(156,"你的搜索记录没有添加到数据库");
        }
        List<Question> questions = questionMapper.findQuestionLikeTitle(questionTitle);
        System.out.println("dsdad:" + questions);
        return new JsonResult<>(200, "查询成功", questions);
    }

    @Override
    public JsonResult findHistorySearch(Integer userId) {
        if (userId == null) {
            return new JsonResult(404, "用户id为空，没有历史记录");
        }
        List<String> historySearch = questionMapper.findHistorySearch(userId);
        return new JsonResult(200, "获取历史记录成功！", historySearch);
    }

    @Override
    public JsonResult delAllHistorySearch(Integer userId) {
        Integer rows = questionMapper.delHistorySearchByUserId(userId);
        if (rows == 0) {
            return new JsonResult(408, "该用户没有搜索记录");
        }
        return new JsonResult(200, "清空历史记录成功！");
    }

    @Override
    public JsonResult delHistorySearch(Integer userId, String searchMessage) {
        Integer row = searchMapper.delSearchForQuestion(userId, searchMessage);
        if (row == 0) {
            return new JsonResult(45646,"没有这条历史记录");
        }
        return new JsonResult(200,"删除成功");
    }

    @Override
    public JsonResult findHotSearch() {
        List<String> hotSearch = questionMapper.findHotSearch();
        return new JsonResult(200, "获取热门问题成功！", hotSearch);
    }

    @Override
    public JsonResult collectQuestion(Integer userId, Integer questionId) {
        //1.判断该用户是否已经收藏 是：不能继续收藏 否：执行2
        QuestionCollection questionCollection = questionMapper.selectQuestionCollection(userId, questionId);
        if (questionCollection != null) {
            return new JsonResult(405, "你已经收藏该问题了，不能继续收藏！");
        }
        //2.在关系表中添加一条数据，添加成功后在问题表中更新收藏次数
        Integer collectRow = questionMapper.addCollectQuestion(userId, questionId);
        if (collectRow == 0) {
            return new JsonResult(9999999, "添加数据失败!");
        }
        //3.在问题表中更新次数
        Integer row = questionMapper.updateQuestionCollections(questionId);
        if (row == 0) {
            return new JsonResult(9999999, "更新次数失败！");
        }
        return new JsonResult(200, "收藏成功！");
    }

    @Override
    public JsonResult cancelCollectQuestion(Integer userId, Integer questionId) {
        Integer row = questionMapper.delCollectQuestion(userId, questionId);
        if (row == 0) {
            return new JsonResult(406, "取消收藏失败!请刷新试试");
        }
        return new JsonResult(200, "取消收藏成功");
    }

    @Override
    public JsonResult praiseQuestion(Integer userId, Integer questionId) {
        //1 查询该用户是否已经点赞此问题
        QuestionFabulous questionFabulous = new QuestionFabulous(userId, questionId);
        QuestionFabulous questionFabulous1 = questionMapper.selectByQuestionFabulous(questionFabulous);
        if (questionFabulous1 != null) {
            return new JsonResult(405, "你已经给该问题点过赞了");
        }
        //2 把点赞记录 记录到关系表中
        Integer row = questionMapper.addQuestionFabulous(questionFabulous);
        if (row == 0) {
            return new JsonResult(406, "点赞失败");
        }
        //3 回答表点赞次数加1
        Integer points = questionMapper.updateQuestionPoints(questionId);
        if (points == 0) {
            return new JsonResult(407, "点赞成功！但数据库没有更新数据");
        }
        return new JsonResult(200, "点赞成功");
    }

    @Override
    public JsonResult cancelPraiseQuestion(Integer userId, Integer questionId) {
        QuestionFabulous questionFabulou = new QuestionFabulous(userId, questionId);
        System.out.println(questionFabulou);
        Integer row = questionMapper.delQuestionFabulous(questionFabulou);
        if (row == 0) {
            return new JsonResult(406, "取消点赞失败");
        }
        return new JsonResult(200, "取消点赞成功");
    }

    @Override
    public JsonResult numberOfQuestion() {
        Integer num = questionMapper.countUserForQuestion();
        if (num == null) {
            return new JsonResult(406, "未知错误");
        }
        return new JsonResult(200, "成功", num);
    }
}
